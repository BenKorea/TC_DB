---
title: I-131 치료 데이터베이스 만들기
author: BenKorea
description: "데이터베이스를 만드는 과정 기록"
date: "2025-01-11"
date-modified: "`r Sys.Date()`"
toc-depth: 4
---

## Coding 원칙

### **상수명**

-   영문대문자만 사용하여 변수명과 구별하였습니다.

### **테이블/변수명**

-   snake_case를 작명 원칙으로 하였습니다.
    -   이는 PostgreSQL이 대소문자를 구별하지 않기 때문입니다.
    -   데이터베이스와 무관하고 대문자를 사용하면 의미가 더 명확해지는 경우는 예외적으로 대문자를 사용하였습니다.
-   엑셀등에서 읽어들인 테이블 data는 \_raw 접미사를 사용하였습니다.
-   마이닝에 의해 테이블 data의 레코드 수가 달라질 경우, 테이블의 명칭을 변경하였고, 전후에 갯수가 보존되었음을 검증하고자 노력했습니다.

```{r MODE, echo=FALSE, message=FALSE}

ERROR_CKECKING_MODE<-"Y"
```

```{r library, echo=FALSE, message=FALSE}

library(data.table)
library(readxl)
library(dplyr)
library(stringr)
library(lubridate)
library(ggplot2)
library(knitr)
library(purrr)
library(stringi)
library(moonBook)
```

```{r sourcing, echo=FALSE, message=FALSE}

my_load_source_files <- function (source_folder) {

  source_path <- file.path(getwd(), source_folder)
  r_files <- list.files(source_path, pattern = "\\.R$", full.names = TRUE)
  invisible(lapply(r_files, source))
}

my_load_source_files("source")
```

```{r gamma, echo=FALSE, results='hide'}

gamma_raw<- my_read_excel_list("raw_data/Gamma_data","Gamma")

gamma <- gamma_raw[, .(등록번호,성명,진료과,진료과명,항목코드,항목명,실시일시)]

colSums(is.na(gamma))
gamma_raw_is_na_실시일시 <- gamma[is.na(실시일시), ]
# 실시일시==NA인 항목코드에 분석에 필요한 코드가 포함되지 않아 그대로 진행 

setnames(gamma, old = "등록번호", new = "pt_id")
setnames(gamma, old = "성명", new = "pt_name")
setnames(gamma, old = "실시일시", new = "실시일")

gamma[, 실시일 := as.IDate(실시일, format = "%Y%m%d")]
gamma[, 실시요일 := weekdays(실시일)]
gamma[, tx_date := 실시일 - 2]
```

## OCS 자료

### **감마카메라실 판독소견**

I-131 치료정보를 구하는 방법은 몇 가지가 있겠지만 저자는 판독소견조회메뉴에서 다운로드된 자료에서 추출하는 방식을 사용하였습니다.

-   핵의학체내/검사결과관리/판독소견조회 메뉴에서 접수일자를 설정하고 검사실을 감마카메라실로 설정하고 판독/미판독/전체 중 전체를 선택하여 진행합니다.

-   이 때 접수일자기간을 너무 길게 설정하면 오류가 나므로 3개월에서 6개월 정도가 적당해 보입니다. 그렇지만 특정분기에는 검사 건수가 많아 3개월 단위로 다운로드 하는 것이 제일 안전합니다.

-   조회가 완료되면 좌하측의 "조회내역출력"버튼을 누르면 화면에 검사내역이 보이며 우측하부의 페이지가 계속증가하는 것이 보입니다. 페이지가 증가되다가 멈추면, 좌측상부의 저장버튼을 눌러 저장하면 됩니다. csv 파일형식을 지원하지 않으므로 "Microsoft Excel 파일 (\*.xls)로 진행하면 됩니다.

-   보고서 형식 유지는 불필요하므로 선택을 해제하고 진행하면 됩니다.

-   저장 후에는 마우스 우클릭으로 보안문서관리의 암호화해제를 해야 파일을 열어 볼 수 있습니다.

-   자료를 다운로드 받는 곳은 사전에 허락된 전산적으로 안전한 폴더에 해야 하면, 곧바로 암호를 설정하고, 익명화작업을 거친 자료를 만든 후 원본자료를 바로 영구삭제를 해야 합니다.

-   이글의 아래 부분들은 익명화작업이 완변히 진행되었다고 가정하고 설명을 합니다.

-   이글의 작성시점에서 다운로드된 자료의 개요는 아래와 같습니다.

    -   기간: `r min(gamma$실시일, na.rm=TRUE)` \~ `r max(gamma$실시일, na.rm=TRUE)`
    -   총자료수: `r nrow(gamma)`

```{r HD074, echo=FALSE, results='hide'}

hd074_raw <- gamma[항목코드 %in% "HD074"]

colSums(is.na(hd074_raw)) # 이 코드에서는 진료과와 실시일에 NA가 없음

hd074_nm <- hd074_raw[진료과 %in% "NM"]
hd074_not_nm <- hd074_raw[진료과 %in% "NM"]

hd074_nm_monday <-  hd074_nm[실시요일 %in% "월요일"]
hd074_nm_except_monday <- hd074_nm[!(실시요일 %in% "월요일")]
hd074<-hd074_nm_except_monday
```

#### **HD074 코드**

I-131 치료 후 시행되는 치료스캔의 코드는 시간 경과에 따라 변해왔습니다. 최근에는 치료스캔의 향상된 수가를 반영하기 위해서 본원에서는

-   항목코드: `HD074`

-   항목명: `체내섭취평가 전신스캔 방법`

을 특정시점부터 사용하고 있습니다. 그래서 감마카메라실 판독소견 다운로드된 자료 중에서 가장 최신 코드인 `HD074` 부터 우선 선별하고 검증을 진행하였습니다.

-   기간: `r min(hd074_raw$실시일, na.rm=TRUE)` \~ `r max(hd074_raw$실시일, na.rm=TRUE)`

-   총 스캔수: `r nrow(hd074_raw)`

진료과 IM3인 `r nrow(hd074_raw)-nrow(hd074_nm)` 례가 포함되어 있었으며, 이는 DOTATATE 및 PSMA 치료와 같은 타과와의 공동임상시험에서도 위의 치료스캔코드가 사용되어 발생하였하므로 이를 배제하기 위해 `진료과==NM`으로 한정하였을 때

-   `진료과==NM`인 스캔수: `r nrow(hd074_nm)` 였습니다.

현재는 I-131 치료스캔은 금요일에만 시행되므로, 시행요일들을 조사해보면 아래와 같았습니다.

```{r hd074_weekday, echo=FALSE, message=FALSE, warning=FALSE}

table(hd074_nm$실시요일) %>% kable()
```

-   월요일에 실시된 치료스캔들의 판독내용을 보면 Ra-223 치료스캔이거나 NM에서 시행된 DOTATATE 치료이므로 월요일 실시된 스캔들을 제외하고 진행하였습니다.

-   정리하면, HD074 코드사용한 I-131 치료스캔은 `r nrow(hd074_nm_except_monday)` 사례였습니다.

```{r HD074_by_tx_date, echo=FALSE, message=FALSE}

hd074_by_tx_date <- hd074[, .(n = .N), by = .(tx_date)]
```

-   일일치료건수의 최대값은 `r max(hd074_by_tx_date$n)`으로 가용한 핵의학과 격리 치료병실 수 범위 내 였습니다.
-   이를 도시하면 아래의 @fig-HD074 와 같습니다.

```{r echo=FALSE, message=FALSE}
#| label: fig-HD074

plots<-my_plot_daily_treatments(hd074_by_tx_date)
walk(plots, print)
```

```{r D43018, echo=FALSE, results='hide'}

d43018 <- gamma[항목코드 %in% "D43018"]
colSums(is.na(d43018)) # 이 코드에서는 진료과에는 NA가 있으나 실시일에는 없음

d43018_by_tx_date <- d43018[, .(n = .N), by = .(tx_date)]
```

#### **D43018 코드**

-   항목코드 `D43018`은 항목명 `[131I] Whole Body Scan (Post Treatment)`입니다.
-   선별해보면
    -   기간: `r min(d43018$실시일, na.rm=TRUE)` \~ `r max(d43018$실시일, na.rm=TRUE)`
    -   총건수: `r nrow(d43018)` 이었습니다.
    -   전형적인 코드이므로 요일과 무관하게 당연히 I-131 치료스캔으로 판단됩니다.
    -   HD074와 처방기간의 중복도 없습니다.
-   오류점검에서
    -   시행일별 최대건수는 `r max(d43018_by_tx_date$n, na.rm=TRUE)`로 치료병실 가동범위 내입니다.
    -   연도별 실시일별 횟수(=코드합계) 그래프는 아래와 같습니다.

```{r echo=FALSE, message=FALSE}
#| label: fig-D43018

plots<-my_plot_daily_treatments(d43018_by_tx_date)
walk(plots, print)
```

```{r D43019, echo=FALSE, message=FALSE, results='hide'}

d43019 <- gamma[항목코드 %in% "D43019"]

colSums(is.na(d43019)) # 이 코드에서는 진료과/실시일에 NA가 없음

MIN_D43018_DATE <- min(gamma[항목코드 %in% "D43018", 실시일], na.rm = TRUE)

d43019_before_d43018 <- d43019[실시일 < MIN_D43018_DATE]
d43019_after_d43018 <- d43019[실시일 >= MIN_D43018_DATE]

d43019_by_tx_date <- d43019[, .(n = .N), by = .(tx_date)]
```

#### **D43019 코드**

-   항목코드 `D43019`은 항목명 `[131I] Whole Body Scan (5mCi)`입니다.
-   선별해보면
    -   기간: `r min(d43019$실시일, na.rm=TRUE)` \~ `r max(d43019$실시일, na.rm=TRUE)`
    -   총건수: `r nrow(d43019)` 였습니다.
    -   그 이전에도 이 코드는 사용되었지만 전산화가 되기 이전은 다운로드가 되지 않아서 최초 사용년도가 2000년도라 생각됩니다.
    -   일부 샘플링을 해서 추정해보면 이 코드의 경우에서는 기간에 따라 사용목적이 달라졌다고 생각되는데 `D43018`이 최초사용일 `r min(d43018$실시일, na.rm=TRUE)` 이전의 `r nrow(d43019_before_d43018)` 사례는 I-131 치료스캔으로 사용이되었다고 생각됩니다. 이후의 `r nrow(d43019_after_d43018)` 사례는 진단스캔으로 사용된 것으로 추정됩니다.
    -   일단은 `D43018` 이전은 치료로 간주하고 이후는 사용목적이 불분명하지만 그 빈도가 높지 않으므로 I-131 diagnostic whole body scan으로 사용된 것으로 간주하고 진행하였습니다.
-   오류점검에서
    -   시행일별 최대건수는 `r max(d43019_by_tx_date$n, na.rm=TRUE)`로 치료병실 가동범위 내입니다.

```{r echo=FALSE, message=FALSE}
#| label: fig-d43019

plots<-my_plot_daily_treatments(d43019_by_tx_date)
walk(plots, print)
```

```{r D43020, echo=FALSE, message=FALSE}
#| eval: false

d43020 <- gamma[항목코드 %in% "D43020"]
```

#### **D43020 코드 (x)**

-   항목코드 `D43020`은 항목명 `[131I] Whole Body Scan (10mCi)`입니다.
-   진단스캔만으로 사용되었다 생각되어 치료스캔에 포함시키지 않았습니다.

```{r tx_ocs, echo=FALSE, message=FALSE, results='hide'}

tx_ocs <- rbind(hd074, d43018, d43019_before_d43018)

setnames(tx_ocs, old = "항목코드", new = "source")
tx_ocs <- tx_ocs[, .(pt_id,pt_name,tx_date,source,실시일)]
tx_ocs[, tx_type := "I-131"]

if (ERROR_CKECKING_MODE=="Y") {
  tx_ocs_by_pt_id_tx_date <- tx_ocs[
    , .(count = .N),  # 그룹별 개수 계산
    by = .(pt_id, tx_date)  # pt_id와 tx_date별 그룹화
  ]
  if (nrow(tx_ocs)==nrow(tx_ocs_by_pt_id_tx_date)) {
    print("tx_ocs를 pt_id와 tx_date로 그룹화하여도 갯수가 달라지지 않는 것을 확인했을 때 병합 후 pt_id 별 tx_date의 중복은 없었습니다.")
  } else {}
} else {}

```

### tx_ocs로 통합

-   D43019 자료는 이 코드의 최초사용일 `r min(d43019$실시일, na.rm=TRUE)`로부터 D43018의 최초사용일인 `r min(d43018$실시일, na.rm=TRUE)`까지만 통합에 사용하였습니다. 이는 `r nrow(d43019_before_d43018)`례에 해당합니다.
-   D43018은 자료수 `r nrow(d43018)` 그대로 통합하였고
-   HD074도 자료수 `r nrow(hd074)` 그대로 통합하여
-   총자료수 `r nrow(tx_ocs)` 로 진행하였습니다. (이는 각각의 합인 `r nrow(d43018) + nrow(hd074) + nrow(d43019_before_d43018)`고 일치합니다.
-   D43019의 2001년 그래프를 보면 치료건수가 3월부터 약 20건으로 급증하여 이 것이 국가방사선비상진료센터 내의 격리치료병실이 가동되기 시작한 때로 추정되며, 치료환자의 분석시작 시점으로 설정하는 것도 향후 고려됩니다.

```{r tx_access, echo=FALSE, results='hide', warning=FALSE}

tx_access_raw <- my_read_excel("raw_data/Tx_data","I-131 치료 정보.xlsx",                my_define_col_types(total=17,date=4,numeric=c(5,6)))
tx_access <- tx_access_raw[, .SD, .SDcols = c("등록번호", "환자이름", "치료종류", "투여일", "용량", "회차","수탁병원","비고")]

setnames(tx_access, old = "등록번호", new = "pt_id")
setnames(tx_access, old = "환자이름", new = "pt_name")
setnames(tx_access, old = "치료종류", new = "tx_type")
setnames(tx_access, old = "투여일", new = "tx_date")
setnames(tx_access, old = "용량", new = "tx_dose")
setnames(tx_access, old = "회차", new = "tx_number")
setnames(tx_access, old = "수탁병원", new = "refer_hosp")
setnames(tx_access, old = "비고", new = "memo")
tx_access[, tx_date := as.IDate(tx_date)]

tx_access_list <-my_validation_pt_id(tx_access)
tx_access <-tx_access_list$valid
tx_access_invalid <-tx_access_list$invalid
tx_access_invalid <- tx_access_invalid[!is.na(pt_id)]
tx_access<-rbind(tx_access,tx_access_invalid)
rm(tx_access_list)

tx_access_invalid_sequence <-my_find_invalid_sequences(tx_access)
# Access 날짜중복입력 사례를 코딩에서 수정 
tx_access[pt_id == "00139889" & tx_number == 5, tx_date := as.IDate("2013-06-10")]

# 수탁병원기록이 없거나 "ㅡ"면 refer에 0을 파생
tx_access[, refer := ifelse(is.na(refer_hosp) | refer_hosp == "ㅡ", 0, 1)]
tx_access[, refer := as.integer(refer)]

tx_access[, outside_hosp := ifelse(str_detect(memo, "병원"), TRUE, FALSE)]


colSums(is.na(tx_access))

# 환자단위로 요약
patient_tx_access <- tx_access[, .(
  first_tx = min(tx_date, na.rm = TRUE),
  last_tx = max(tx_date, na.rm = TRUE),
  cumulative_dose = sum(tx_dose, na.rm = TRUE),
  tx_number = .N,
  refer = sum(refer, na.rm = TRUE)
), by = .(pt_id, pt_name)]

patient_tx_access_refer_no <- patient_tx_access[refer == 0]
patient_tx_access_refer <- patient_tx_access[refer > 0]
```

## Access 데이터베이스

### I-131 치료 정보

-   저자는 핵의학치료를 Access의 `I-131 치료 정보` 테이블에 2014년7월9일까지 입력했었습니다.
    -   `r min(tx_access$tx_date, na.rm=TRUE)`부터 `r max(tx_access$tx_date, na.rm=TRUE)`까지
    -   `r nrow(tx_access)`회의 핵의학치료가 입력되어 있습니다. (입력오류 검증 전)
-   연도별로 실시일별 횟수(치료건수)는 아래의 그래프들과 같다.

```{r tx_access_by_tx_date, echo=FALSE, message=FALSE, warning=FALSE}

tx_access_by_tx_date <- tx_access[, .(n = .N), by = .(tx_date)]
setorder(tx_access_by_tx_date, tx_date)  # 오름차순 정렬
plots <- my_plot_daily_treatments(tx_access_by_tx_date)

walk(plots, print)
```

-   그래프를 보면 `r min(tx_access$tx_date, na.rm=TRUE)`부터이지만, 1996년 이전은 간헐적으로 입력된 것으로 판단되므로, 경우에 따라서는 1996년부터 분석대상으로 하는 것이 고려될 수 있다.

```{r tx_access_ocs, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

tx_ocs[, c("실시일") := NULL]
tx_access[, c("memo") := NULL]
tx_access[, source := "Access"]

tx_access_ocs <- merge (tx_access, tx_ocs[,.(pt_id,pt_name,tx_date,source)],   
                    by = c("pt_id", "tx_date"),
                    all = TRUE
)

tx_access_ocs[, pt_name := ifelse(is.na(pt_name.x), pt_name.y, pt_name.x)]
tx_access_ocs[, tx_type := ifelse(is.na(tx_type), "I-131", tx_type)]
tx_access_ocs[, source := paste(source.x,source.y)]
tx_access_ocs[, source := gsub("NA","",source)]
tx_access_ocs[, c("pt_name.x","pt_name.y","source.x","source.y") := NULL]

summary(tx_access_ocs)

setorder(tx_access_ocs, pt_id, tx_date)

print(nrow(tx_access_ocs))

tx_access_ocs_by_pt_id_tx_date <- tx_access_ocs[, `:=`(
  다음tx_date_차이 = shift(tx_date, type = "lead") - tx_date,
  이전tx_date_차이 = tx_date - shift(tx_date, type = "lag")
), by = pt_id]

tx_access_ocs_by_pt_id_tx_date[, remove := fifelse(
  ((!is.na(다음tx_date_차이) & 다음tx_date_차이 < 8) |
   (!is.na(이전tx_date_차이) & 이전tx_date_차이 < 8)) & !str_detect(source,"Access"),
  "Y",
  "N"
)]


tx_access_ocs_by_pt_id_tx_date[, source := fifelse(
  ((!is.na(다음tx_date_차이) & 다음tx_date_차이 < 8) | 
   (!is.na(이전tx_date_차이) & 이전tx_date_차이 < 8)) & str_detect(source,"Access"), 
  paste(source, "OCS"),
  source
)]

tx_access_ocs_duplicated <- tx_access_ocs_by_pt_id_tx_date[remove == "Y"]
tx_access_ocs <- tx_access_ocs_by_pt_id_tx_date[remove == "N"]
tx_access_ocs[,c("다음tx_date_차이","이전tx_date_차이","remove") := NULL]
setcolorder(tx_access_ocs, c("pt_id", "pt_name"))


table(tx_access_ocs_by_pt_id_tx_date$source)
str_ACCESS <- tx_access_ocs_by_pt_id_tx_date[str_detect(source,"Access"),]
not_OCS <- tx_access_ocs_by_pt_id_tx_date[!str_detect(source,"Access"),]

tx_access_ocs_other <- tx_access_ocs[tx_type == "I-131 MIBG" | tx_type == "RIT"]
tx_access_ocs_rai <- tx_access_ocs[tx_type != "I-131 MIBG" & tx_type != "RIT"]
```

### OCS와 Access 병합

-   Access 데이터베이스의 `r nrow(tx_access_raw)-1` 건과 OCS 다운로드된 `r nrow(tx_ocs)` 건을 병합(full join)하면 `r nrow(tx_access_ocs_by_pt_id_tx_date)` 건이 되었습니다.
-   위 병합은 등록번호가 치료날짜가 같은 것을 기준으로 하였지만 입력된 날짜가 다를 수도 있으므로 날짜가 7일 이내의 차이를 보이면 중복된 것으로 판단할 때 `r nrow(tx_access_ocs_duplicated)` 건의 중복건을 제외하면
-   총 치료횟수는 `r nrow(tx_access_ocs)` 건이었습니다.
-   치료종류가 `I-131 MIBG` 와 `RIT` 는 `r nrow(tx_access_ocs_other)` 였고.
-   이를 제외한 Radioactive Iodine Therapy는 `r nrow(tx_access_ocs_rai)` 건 이었습니다.

```{r patient_access_ocs_rai, echo=FALSE, message=FALSE, warning=FALSE}

patient_access_ocs_rai <-tx_access_ocs_rai[, .(
  first_tx = as.Date(min(tx_date, na.rm = TRUE)),
  last_tx = as.Date(max(tx_date, na.rm = TRUE)),
  total_dose = sum(tx_dose, na.rm=TRUE),
  tx_number = .N,
  refer = sum(refer, na.rm = TRUE)
), by = .(pt_id, pt_name)]
```

```{r emr_raw, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}

emr_raw<- my_read_excel_list("raw_data","관심환자")
emr <- emr_raw[, .(등록일, 등록번호, `성 명`, 성별, 나이, 특기사항, 분류명)]

summary(emr)

setnames(emr, old = "등록번호", new = "pt_id")
setnames(emr, old = "성 명", new = "pt_name")
setnames(emr, old = "성별", new = "sex")
setnames(emr, old = "나이", new = "age")
emr[, 등록일 := as.IDate(등록일)]
```

```{r tx_emr, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}

tx_emr <- my_parsing_tx_emr(emr)
# tx_emr_error_tx_tg_binary가 있으므로 알고지름 오류가 있는지 검토할 때 참고해야 함

################3
tx_emr <- tx_emr[!(pt_id == "01207732" & tx_date == as.IDate("2021-03-24") & Therapy == "2nd")]
tx_emr[pt_id == "00595819" & Therapy == "1st", tx_date := as.IDate("1990-03-15")]
tx_emr_check_duplicated <- tx_emr[, .(count = .N), by = .(pt_id, tx_date)]
tx_emr_check_duplicated <- tx_emr_check_duplicated[count>1,]
################

summary(tx_emr)
tx_emr_is_na_tx_dose <- tx_emr[is.na(tx_dose),]
```

## EMR 관심환자

-   저자는 외래진료기록시 예후정보, 핵의학 치료정보, ATA response를 메타데이터화하여 관심환자에 등록해오고 있다. 타과장님의 환자가 저자의 환자가 된 경우로 등록해오고 있다.
-   비록 핵의학과 전체는 아니지만 single expert의 long-term follow up data이면서 치료 및 추적관찰 프로토콜에 일관성이 좋아 임상적인 의미를 도출할 수 있다고 생각한다.

### tx_emr

-   엑셀파일로 다운로드하여 핵의학 치료기록만 추출하여 tx_emr로 구분하였다.
-   요약하면
    -   기간: `r min(tx_emr$tx_date, na.rm=TRUE)` \~ `r max(tx_emr$tx_date, na.rm=TRUE)`
    -   치료횟수: `r nrow(tx_emr)`
    -   여기에는 치료용량을 확인할 수 없었던 `r nrow(tx_emr_is_na_tx_dose)`례도 포함되어 있다.
-   연도별로 실시일별 룃수(치료건수)는 아래의 그패프들과 같습니다.

```{r tx_emr_plot, echo=FALSE, warning=FALSE, message=FALSE}

tx_emr_by_tx_date <- tx_emr[, .(n = .N), by = .(tx_date)]
setorder(tx_emr_by_tx_date, tx_date)  # 오름차순 정렬
plots<-my_plot_daily_treatments(tx_emr_by_tx_date)
walk(plots, print)
```

-   1990년이전의 등록된 연간치료건수는 적으며 그나마, 1990년부터의 등료건수 연 6회 이상임을 알 수 있습니다.

```{r combining, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

tx_emr <- tx_emr[, .(pt_id,pt_name,tx_date,tx_type,tx_dose,tx_number,outside_hosp,tx_wbs,tx_tg,tx_tg_binary)]

tx_emr[,source := "EMR"]

tx_emr_mibg <- tx_emr[tx_type=="I-131 MIBG",]
tx_emr_rai <- tx_emr[tx_type!="I-131 MIBG",]


tx_access_ocs_emr <- merge(tx_access_ocs_rai, tx_emr_rai, by = c("pt_id", "tx_date"), all=TRUE)

tx_access_ocs_emr[,pt_name := ifelse(is.na(pt_name.y), pt_name.x, pt_name.y)]
tx_access_ocs_emr[,tx_type := ifelse(is.na(tx_type.y), tx_type.x, tx_type.y)]
tx_access_ocs_emr[,tx_dose := ifelse(is.na(tx_dose.y), tx_dose.x, tx_dose.y)]
tx_access_ocs_emr[,tx_number := ifelse(is.na(tx_number.y), tx_number.x, tx_number.y)]
tx_access_ocs_emr[,outside_hosp := ifelse(is.na(outside_hosp.y), outside_hosp.x, outside_hosp.y)]
tx_access_ocs_emr[,source := paste(source.x, source.y)]
tx_access_ocs_emr[,source := gsub("NA","",source)]
tx_access_ocs_emr[, c("pt_name.x","pt_name.y","tx_type.x","tx_type.y","tx_dose.x","tx_dose.y","tx_number.x","tx_number.y","outside_hosp.x","outside_hosp.y","source.x","source.y") := NULL]
setcolorder(tx_access_ocs_emr,c("pt_id","pt_name","tx_date","tx_type","tx_number","tx_dose","tx_wbs","tx_tg","tx_tg_binary","refer_hosp","refer","outside_hosp","source"))

summary(tx_access_ocs_emr)
```

## OCS+Access+EMR 치료병합

EMR에 등록된 치료 `r nrow(tx_emr)` 중 I-131 MIBG 치료 `r nrow(tx_emr_mibg)` 례를 제외한 나머지 `r nrow(tx_emr_rai)` 자료를 앞서의 OCS+Access 병합자료 `r nrow(tx_access_ocs_rai)`에 다시 병합(full join)하였습니다.

```{r tx_access_ocs_emr_duplicated, echo=FALSE, message=FALSE, warning=FALSE}

tx_access_ocs_emr_check_duplicated <- tx_access_ocs_emr[, .(count = .N), by = .(pt_id, tx_date)]
tx_emr_check_duplicated_count <- tx_access_ocs_emr_check_duplicated[count>1,]
################

setorder(tx_access_ocs_emr, pt_id, tx_date)

tx_access_ocs_emr_by_pt_id_tx_date<-tx_access_ocs_emr[, `:=`(
  다음tx_date_차이 = shift(tx_date, type = "lead")-tx_date,
  이전tx_date_차이 = tx_date - shift(tx_date, type = "lag")), 
  by = pt_id]

tx_access_ocs_emr_by_pt_id_tx_date[, remove := fifelse(
  ((!is.na(다음tx_date_차이) & 다음tx_date_차이 < 8) |
   (!is.na(이전tx_date_차이) & 이전tx_date_차이 < 8)) & !str_detect(source,"EMR"),
  "Y",
  "N"
)]


tx_access_ocs_emr_by_pt_id_tx_date[, source := fifelse(
  remove=="N" & !str_detect(source,"EMR"),
  paste(source, "EMR"),
  source
)]

tx_access_ocs_emr_duplicated <- tx_access_ocs_emr_by_pt_id_tx_date[remove != "N"]
tx_access_ocs_emr <- tx_access_ocs_emr_by_pt_id_tx_date[remove == "N"]
```

-   병합된 자료수는 `r nrow(tx_access_ocs_emr_by_pt_id_tx_date)`였으며
-   위 병합은 pt_id와 tx_date가 같은 것으로 기준으로 하였으나 입력한 tx_date의 차이가 7일 이내면 날짜 입력 오류에 의한 중복으로 판단하였고,
-   이러한 중복은 `r nrow(tx_access_ocs_emr_duplicated)` 례가 있었고,
-   중복이 되지 않도록 조정하였을 때, 치료는 `r nrow(tx_access_ocs_emr)` 례 였습니다.

```{r patient_tx_access_ocs_emr, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

patient_tx_access_ocs_emr <- tx_access_ocs_emr[, .(
  first_tx = min(tx_date, na.rm = TRUE),
  last_tx = max(tx_date, na.rm = TRUE),
  cumulative_dose = sum(tx_dose, na.rm = TRUE),
  tx_number = .N,
  refer = sum(refer, na.rm = TRUE)               # tx_number 개수 (행 개수)
), by = .(pt_id, pt_name)]

colSums(is.na(patient_tx_access_ocs_emr))

```

```{r patient_tx_emr, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

patient_tx_emr <- tx_emr[, .(
  first_tx = min(tx_date, na.rm = TRUE),
  last_tx = max(tx_date, na.rm = TRUE),
  cumulative_dose = sum(tx_dose, na.rm = TRUE),
  tx_number = .N
), by = .(pt_id, pt_name)]

colSums(is.na(patient_tx_emr))

patient_tx_access_ocs_emr[, source := ifelse(
  pt_id %in% patient_tx_emr$pt_id, "EMR", NA_character_
)]

patient_tx_access_ocs_emr_refer_0_not <- patient_tx_access_ocs_emr[refer!=0,]
patient_tx_access_ocs_emr_refer_0 <- patient_tx_access_ocs_emr[refer==0,]

FOLLOWUP_RATE <- round(nrow(patient_tx_access_ocs_emr_refer_0[source=="EMR",])/nrow(patient_tx_access_ocs_emr_refer_0)*100)
```

## 분석대상군의 결정

-   OCS+Access+EMR 자료를 병합한 치료정보에서 환자정보를 추출해보면 환자수는 `r nrow(patient_tx_access_ocs_emr)`였습니다.

```{r prescription, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

prescription_raw<-my_read_excel_list("raw_data/Prescription_data","갑상선호르몬")
colSums(is.na(prescription_raw))
prescription_raw_is_na<-prescription_raw[is.na(등록번호),]
prescription_raw <- prescription_raw[!is.na(등록번호),]

prescription<-prescription_raw[, .(등록번호,환자명,처방일자,처방코드,처방명,수량)]

setnames(prescription, old = "등록번호", new = "pt_id")
setnames(prescription, old = "환자명", new = "pt_name")
setnames(prescription, old = "처방일자", new = "prescription_date")
setnames(prescription, old = "처방코드", new = "prescription_code")
setnames(prescription, old = "처방명", new = "prescription_name")
setnames(prescription, old = "수량", new = "prescription_days")
prescription[, prescription_date := as.IDate(prescription_date)]
prescription[, prescription_days := as.integer(as.numeric(prescription_days))]

prescription_by_pt_id <- prescription[, .(
  first_prescription = min(prescription_date, na.rm = TRUE),
  last_prescription = max(prescription_date, na.rm = TRUE),
  cumulative_days = sum(prescription_days, na.rm = TRUE),
  prescription_number = .N
), by = .(pt_id)]

MIN_PRESCRIPTION_DATE <- min(prescription$prescription_date, na.rm=TRUE)
MAX_PRESCRIPTION_DATE <- max(prescription$prescription_date, na.rm=TRUE)
```

### 갑상선호르몬 처방통계

-   약품별 처방통계로부터 다운로드하여 followup date 결정에 사용하였습니다.
-   (다운로드 가능했던) 처방기간은 `r MIN_PRESCRIPTION_DATE`부터 `r MAX_PRESCRIPTION_DATE`였습니다.

```{r patient_prescription, echo=FALSE, results='hide'}

patient_prescription_raw <- merge(
  patient_tx_access_ocs_emr, 
  prescription_by_pt_id, 
  by = "pt_id", 
  all.x = TRUE)

### 최소 추적관찰기간의 정의에 따른 분석대상군 선별
FOLLOWUP_DAYS_CRITERIA <- 365 + 183
patient_prescription <- patient_prescription_raw[
  as.IDate(MAX_PRESCRIPTION_DATE - FOLLOWUP_DAYS_CRITERIA) > last_tx,
]


### follow up loss
FOLLOWUP_LOSS_CRITERIA <- 400 + 365
patient_prescription[, max_last_difference :=MAX_PRESCRIPTION_DATE - as.IDate(last_prescription)]
patient_prescription[, fu_loss := fifelse(max_last_difference > FOLLOWUP_LOSS_CRITERIA,TRUE,FALSE)]
colSums(is.na(patient_prescription))

### 미처방 환자의 분류 
patient_prescription_last_prescription_is_na <- patient_prescription[is.na(last_prescription),]

#### 미처방 - 수탁환자 
# patient_prescription[, refer_binary := NA]
patient_prescription[, refer_binary := fifelse(is.na(last_prescription) & (last_tx >= MIN_PRESCRIPTION_DATE), TRUE, FALSE)]
colSums(is.na(patient_prescription))

#### 미처방 - fu_loss
patient_prescription[, fu_loss :=  fifelse(is.na(last_prescription) & (last_tx < MIN_PRESCRIPTION_DATE), TRUE, fu_loss)]
colSums(is.na(patient_prescription))
patient_prescription[is.na(fu_loss), fu_loss :=  FALSE]
colSums(is.na(patient_prescription))

### 치료와 처방 날짜의 차이 분류
PRESCRIPTION_DAYS_CRITERIA <- 200
patient_prescription[, px_tx_difference := as.IDate(last_prescription) - as.IDate(last_tx)]
patient_prescription[
  px_tx_difference < PRESCRIPTION_DAYS_CRITERIA &
  tx_number < 4 &
  max_last_difference > 400, 
  refer_binary := TRUE
]

patient_refer <-patient_prescription[refer_binary==TRUE,]
patient <-patient_prescription[refer_binary==FALSE,]

FOLLOWUP_LOSS_RATE <- round(sum(patient$fu_loss)/nrow(patient)*100, digit=0)
```

```{r patient_prescription_summary, echo=FALSE, message=FALSE, warning=FALSE, eval=FALSE}

### 탈락율을 위한 그래프

my_plot_yearly_loss(patient)
```

```{r my_patient, echo=FALSE, message=FALSE, warning=FALSE, results='hide'}

my_patient <- patient[source=="EMR",]
my_patient <- my_patient[, .(pt_id, pt_name, first_tx, last_tx, cumulative_dose, tx_number, fu_loss, last_prescription)]
my_patient[,last_visit := last_prescription][,last_prescription := NULL]
```

### 최소 추적관찰기간의 정의

-   앞서의 환자정보에 처방기록을 병합(left join)하여 patient_prescription 정보를 만들었습니다.
-   갑상선암 재발분석은 방사성요오드 치료 이후 재발여부에 대한 검사가 시행되는 것이 6\~18개월인 점을 고려하여 `r MAX_PRESCRIPTION_DATE`로부터 `r FOLLOWUP_DAYS_CRITERIA`일 (약 18개월) 이전의 치료기록까지의 환자들 `r nrow(patient_prescription)`명을 분석대상에 포함하였습니다.

### follow up loss의 정의

-   갑상선호르몬 처방기간이 400일까지 되고 있고, 일부 환자들에서 여분의 약을 이용하여 외래를 연기하는 것을 고려하여 다운로드된 가장 최근의 처방날짜 `r MAX_PRESCRIPTION_DATE`로부터 765일 이내에 처방기록이 없는 환자들을 follow up loss로 정의하였습니다.

#### **미처방 환자의 분류**

-   처방기록이 없는 환자의 분류
    -   전체 미처방은 `r nrow(patient_prescription_last_prescription_is_na)`건이었으며 처방기록은 `r MIN_PRESCRIPTION_DATE`부터이므로 치료기록이 이 이전인 사례는 `r nrow(patient_prescription_last_prescription_is_na[last_tx<MIN_PRESCRIPTION_DATE,])` 건이었고, 이 이후의 사례는 `r nrow(patient_prescription_last_prescription_is_na[last_tx>=MIN_PRESCRIPTION_DATE,])`건 이었습니다.
    -   이전인 사례는 follow up loss로 이후인 사례는 수탁환자로 분류하였습니다.

#### 수탁환자의 정의

-   Access의 수탁치료 기록은 모든 환자들에게 기록이 있는 것이 아니고 일부환자는 수탁치료 이후 본원에서 추적관찰을 하기 때문에 Access 이외의 방법을 고안하였습니다.
-   3회 이내의 치료이면서, 마지막 치료와 마지막 처방이 6개월 이내이면서, 최근 400일 이내에서 처방기록이 없는 환자를 수탁환자로 정의하였습니다.

#### 최종적인 분류

-   치료를 받았던 환자들은 총 `r nrow(patient_prescription)`명이었고
-   위 정의에 따른 수탁환자는 `r nrow(patient_refer)`명이었이었으며
-   따라서 일차 분석대상환자군은 `r nrow(patient)`명이였습니다.
    -   일차분석 대상화자군 중 follow up loss는 `r nrow(patient[fu_loss==TRUE,])`명으로 loss rate는 `r FOLLOWUP_LOSS_RATE`% 였습니다.
    -   일차분석대상군 중 저자가 관심환자로 등록한 환자들은 `r nrow(my_patient)`명이었고, 이 환자군을 대상으로 생존분석을 시행하고자 하였습니다.

```{r response_data, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}

response_data <- my_parsing_response_data(emr)
recurrence_data <- response_data[Response=="Structural", .(pt_id, pt_name, response_date)]
recurrence_data[,recurrence_date := response_date][,c("pt_name","response_date") := NULL]
patient_response<-merge(my_patient,recurrence_data,by="pt_id",all.x=TRUE)
patient_response[,recur := fifelse(is.na(recurrence_date),FALSE,TRUE)]
```

```{r risk_data, echo=FALSE, warning=FALSE, message=FALSE, results='hide'}

risk_data <- my_parsing_risk_data(emr)

risk_data[, pT_size := str_extract(pT_detail, "\\d+(\\.\\d+)?\\s*cm")]
risk_data <- risk_data[, pT_size := str_replace(pT_size, "\\s*cm", "")]
risk_data <- risk_data[, pT_size := as.numeric(pT_size)]
risk_data <- risk_data[!is.na(pT_size),]

risk_data[,pt_name := NULL]

patient_risk<-merge(patient_response, risk_data,
  by="pt_id",
  all.x=TRUE
  )

patient_risk_is_na <- patient_risk[is.na(등록일),]
patient_risk <- patient_risk[!is.na(등록일),]
patient_TT <- patient_risk[Thyroidectomy_Type=="TT"|
                             Thyroidectomy_Type=="Lobectomy_Completion",]

patient_risk_summary <- patient_TT[,
  .(pt_id, pt_name, first_tx, fu_loss, last_visit, recurrence_date, recur, Risk, op_date, cN,Thyroidectomy_Type, ND_Type,   
    operator, Multiplicity, highest_stage_histology, pT, pT_size, pT_subtype, ETE, gross_ETE, pN, 
    ENE, M)
]

patient_op_tx <- patient_risk_summary[first_tx>as.IDate(op_date)&Risk!="Unknown",]
# 
# colSums(is.na(patient_op_tx))
# summary(patient_op_tx)

```

```{r birthday_data, echo=FALSE, warning=FALSE, message=FALSE}

birthday_data <- my_parsing_birthday_data (emr)

px <- merge(patient_op_tx,birthday_data, by="pt_id", all.x=TRUE)
px_is_na_birthday <- px[is.na(birthday),]
px <- px[!is.na(birthday),]
px[, op_date := as.IDate(op_date)]
px[, age := round((op_date-birthday)/365.24)]
px[, time := ifelse(recur==TRUE, round((recurrence_date - op_date)/30.24), round((last_visit - op_date)/30.24))]
```

```{r finalizing, echo=FALSE, warning=FALSE, message=FALSE}

setnames(px, old="highest_stage_histology", "histology")
setnames(px, old="pT_size", "size")
setnames(px, old="pT_subtype", "subtype")
setnames(px, old="operator", "surgeon")

px[surgeon=="CIIJ", surgeon := "CIJ"]
px[surgeon=="LGJ", surgeon := "LGH"]
px[surgeon=="LNC", surgeon := "LMC"]
px[surgeon %in% c("NOC", "NUC", "NWC", "KHA", "MNM", "KST"), surgeon := "GS"]
px[str_detect(surgeon,"GS"), surgeon := "GS"]
px[str_detect(surgeon,"cND"), surgeon := "LGH"]
px[str_detect(surgeon,"sND"), surgeon := "CIJ"]
px[is.na(surgeon), surgeon := "KCCH"]
px[str_detect(surgeon,"@"), surgeon := "outside"]

px_is_na_multiplicity <- px[is.na(Multiplicity),]
px <- px[!is.na(Multiplicity),]
px_is_na_pN <- px[is.na(pN),]
px <- px[!is.na(pN),]
px[is.na(subtype), subtype := "conventional"]
px[str_detect(subtype,"conver"), subtype := "conventional"]
px[str_detect(subtype,"mini"), subtype := "minimally_invasive"]
px <- px[!str_detect(subtype, "unknown"),]
px[str_detect(subtype,"follicullar"), subtype := "follicular"]
px[str_detect(subtype,"diffuse"), subtype := "diffuse_sclerosing"]
px[str_detect(subtype,"encap"), subtype := "encapsulated_angioinvasive"]
px[str_detect(subtype,"oxiphilic"), subtype := "oncocytic"]

px[is.na(M), M := "M0"]

px[str_detect(histology,"Mixed"), histology := "Mixed"]

px_is_blank_pT <- px[pT=="",]
px <- px[!(pT=="" & is.na(size)),]
px[pT=="", pT := "T1b"]

px[pT=="T1" & size <=1, pT := "T1a"]
px <- px[!(pT=="T3" & is.na(size)),]
px[pT=="T1" & size >1, pT := "T1b"]
px[str_detect(pT,"1a"), pT := "T1a"]
px[str_detect(pT,"1b|`b"), pT := "T1b"]
px[str_detect(pT,"3b"), pT := "T3b"]
px[pT=="T3", pT := "T3a"]

px_is_na_size <- px[is.na(size),]

px[str_detect(pN,"N0"), pN := "N0"]
px[str_detect(pN,"1a|Na1"), pN := "N1a"]
px[str_detect(pN,"1b"), pN := "N1b"]
px[pN=="N1"&size==1, pN := "N1b"]
px[pN=="N1", pN := "N1a"]
px <- px[pN!="N?",]
px <- px[M!="M1",]

# `+`가 존재하면 앞의 값만 추출, 아니면 그대로 유지
px[, subtype := fifelse(str_detect(subtype, "\\+"), 
                         str_extract(subtype, "^[^+]+"), 
                         subtype)]


px[, op_year := year(op_date)]
px[, recur := as.factor(recur)]

px <-my_deidentify_pt_id(px, "pt_id")

px <- px[,.(pt_id, age, sex, op_year, surgeon, Thyroidectomy_Type, ND_Type,Risk, histology, subtype, pT, size, Multiplicity, ETE, gross_ETE, pN, ENE, time, recur)]
```

```{r mytable}

mytable(px)
```

```{r}
saveRDS(px,"C:/Projects/R441-Survival_Exercise/deidentified_data/rai_recur.rds")
```

```{r end, echo=FALSE}

```
