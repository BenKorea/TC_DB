---
title: 방사성요오드 치료 데이터베이스
author: 김병일
description: "이 글에서 언급하는 방사성요오드 치료자료를 어떻게 만들었는지에 대한 설명"
date: "2025-01-11"
date-modified: "`r Sys.Date()`"
---

```{r library, echo=FALSE, message=FALSE}

library(data.table)
library(readxl)
library(dplyr)

```

```{r sourcing, echo=FALSE, message=FALSE}

load_source_files <- function (source_folder) {

  project_path <<- getwd()
  source_path <- file.path(project_path, source_folder)
  r_files <- list.files(source_path, pattern = "\\.R$", full.names = TRUE)
  invisible(lapply(r_files, source))

}

load_source_files("source")

```

## Access_data

```{r c73, echo=FALSE}

directory<-"raw_data/Tx_data"
file_name<-"갑상선암 정보.xlsx"
file_path<-file.path(project_path,directory,file_name)
col_types <- rep("text", 59)
col_types[c(2,6,9,40,41,44,58)]<-"date"
c73_raw_data <- as.data.table(read_xlsx(file_path, col_types = col_types))

c73_data <- c73_raw_data[, lapply(.SD, function(col) if (!all(is.na(col))) col), .SDcols = names(c73_raw_data)]
c73_data<-my_PtID(c73_data)
c73_data[, 수술과최초진단일일치 := !is.na(수술일) & !is.na(최초진단일) & (수술일 == 최초진단일)]
c73_op_data <- c73_data[!is.na(최초진단일) |!is.na(수술일) | !is.na(갑상선제거방법)]


```

### C73 수술정보

-   저자는 MS Access를 이용하여 방사성요오드 치료에 대한 데이터베이스를 구축하였었다. 이 자료 중에는 `갑상선암 정보`라는 환자정보에 해당하는 테이블이 있었다.
-   등록번호가 5자리 미만이거나 8자리 초과는 오류이므로 삭제한 후 정리해보면
-   수술일을 기준으로 `r min(c73_data$수술일, na.rm=TRUE)`부터 `r max(c73_data$수술일, na.rm=TRUE)` 까지의 `r nrow(c73_data)` 명의 갑상선암 상병명을 가진 환자들의 수술 정보들이 입력되어 있다.
-   최초진단일 입력건수는 `r sum(!is.na(c73_data$최초진단일))` 이었고, 수술일 입력건수는 `r sum(!is.na(c73_data$수술일))`, 둘 중 하나라도 입력된 건수는 `r sum(!is.na(c73_data$최초진단일) | !is.na(c73_data$수술일))`이었다.
-   갑상선제거방법 입력건수는 `r sum(!is.na(c73_data$갑상선제거방법))`이었다.
-   최초진단일만 입력된 경우가 상당수이긴 하지만 후술하는 치료가 된 환자들의 수술정보가 얼마나 매칭되는지가 관심이므로 일단락한다.

```{r patient, echo=FALSE, message=FALSE, warning=FALSE}

directory<-"raw_data/Tx_data"
file_name<-"Patient.xlsx"
file_path<-file.path(project_path,directory,file_name)
col_types <- rep("text", 19)
col_types[c(7,10,19)]<-"date"
patient_data <- as.data.table(read_xlsx(file_path, col_types = col_types))

patient_data<-select(patient_data, PtID, PtName, Dx, ICDcode, ExpiredDay, FollowUpDay, Protocol)

patient_data <- patient_data %>%
  filter(grepl("Thy|thy", Dx, ignore.case = TRUE) | grepl("C73", ICDcode) | grepl("Thyroid|thyroid|iodine|131", Protocol))

patient_data <- my_PtID(patient_data)

merged_data <- merge(c73_data, patient_data, by = "PtID", all.x = TRUE)

patient_data <- select(merged_data, -PtName, -ICDcode)

rm(c73_data,c73_raw_data,merged_data, patient_raw_data)

```

```{r tx_data, echo=FALSE, message=FALSE, warning=FALSE}

directory<-"raw_data/Tx_data"
file_name<-"I-131 치료 정보.xlsx"
file_path<-file.path(project_path,directory,file_name)
col_types <- rep("text", 17)
col_types[c(4)]<-"date"
col_types[c(5,6)]<-"numeric"

access_tx_data <- as.data.table(read_xlsx(file_path, col_types = col_types))
access_tx_data <-my_PtID(access_tx_data)
# PtID 오류 수정
access_tx_data[, PtID := gsub("06-", "00789437", PtID)]
access_tx_data <- access_tx_data[!is.na(PtID)]
access_tx_data <- select(access_tx_data, PtID, 환자이름, 치료종류, 투여일, 용량, 회차, 담당과장,수탁병원)
access_tx_data$refer <-ifelse(is.na(access_tx_data$수탁병원),0,1) 

acess_tx_patient_data <- access_tx_data %>%
  group_by(PtID, 환자이름) %>%
  summarise(
    first = min(투여일),
    last = max(투여일),
    cumulative_dose = sum(용량),
    count = n(),
    refer = sum(refer),
    .groups = "drop"
  )

acess_tx_not_refer_patient_data <- acess_tx_patient_data %>% filter (refer==0)
```

### I-131 치료 정보

-   `I-131 치료 정보` 테이블에 기입된 격리치료병실에 입실했던 환자들의 정보는 `r min(access_tx_data$투여일, na.rm=TRUE)`부터 `r max(access_tx_data$투여일, na.rm=TRUE)`까지 총 `r nrow(access_tx_data)` 회의 치료가 입력되어 있었다.
-   수탁이 아닌경우의 환자수는 `r nrow(acess_tx_not_refer_patient_data)`였다.

```{r gamma_data, echo=FALSE, message=FALSE, warning=FALSE}

directory<-"raw_data/Gamma_data"
pattern<-"Gamma"
folder_path<-file.path(project_path,directory)
excel_file_names <- list.files(folder_path, pattern = pattern, full.names = TRUE)

data_list <- lapply(excel_file_names, function(file) {
    as.data.table(read_xls(file, col_types = "text"))
})
  
gamma_data <-gamma_raw<- rbindlist(data_list, use.names = TRUE, fill = TRUE)

# gamma_data <- my_read_excels("raw_data/Gamma_data", "Gamma")
gamma_data <- gamma_data %>% 
  filter(진료과명 == "핵의학과" & 항목코드 %in% c("D43018", "HD074"))
gamma_data$처방일 <- as.Date(gamma_data$처방일, format = "%Y%m%d")
gamma_data$접수일시 <- as.Date(gamma_data$접수일시, format = "%Y%m%d")
gamma_data$실시일시 <- as.Date(gamma_data$실시일시, format = "%Y%m%d")
gamma_data$판독일시 <- as.Date(gamma_data$판독일시, format = "%Y%m%d")
gamma_data$보고일시 <- as.Date(gamma_data$보고일시, format = "%Y%m%d")
gamma_data$보고수정일시 <- as.Date(gamma_data$보고수정일시, format = "%Y%m%d")

gamma_data <- gamma_data %>% filter(처방일 > "2014-04-09") %>% my_PtID %>% select (PtID, 성명,처방일)
setnames(gamma_data, old = c("성명", "처방일"), new = c("환자이름", "투여일"))
tx_data <-bind_rows(access_tx_data,gamma_data)

```

## OCR 정보

### I-131 치료스캔 정보

-   앞서의 I-131 치료 정보는 2014-04-09까지 만이므로 그 이후의 자료를 보충하기 위해 판독 중치료스캔에 대한 정보를 수집하였다. 2014년부터의 판독조회자료를 다운로드한 후 항목코드 D43018 또는 HD074이면서 처방일이 2014-04-09 이후를 선별하였다.
-   `r min(gamma_data$투여일, na.rm=TRUE)`부터 `r max(gamma_data$투여일, na.rm=TRUE)`까지 총 `r nrow(gamma_data)` 회의 치료가 입력되어 있었다.

```{r tx_number, echo=FALSE, message=FALSE, warning=FALSE}

revised_tx_data <- copy(tx_data)

# 회차가 NA인 경우 처리
revised_tx_data[is.na(회차), 회차 := as.integer(frank(투여일, ties.method = "dense")), by = PtID]

tx_patient_data <- revised_tx_data %>%
  group_by(PtID, 환자이름) %>%
  summarise(
    first = as.Date(min(투여일)),
    last = as.Date(max(투여일)),
    count = n(),
    refer = sum(refer),
    .groups = "drop"
  )


```

-   Access와 OCR 기원의 치료정보를 합쳤고, 총치료횟수는 `r nrow(revised_tx_data)`였다.
-   환자수는 `r nrow(tx_patient_data)` 였다.

```{r t4_data, echo=FALSE}

raw_data_directory<-"raw_data/Prescription_data"
project_path <<- getwd()
raw_data_path <<- file.path(project_path, raw_data_directory)
pattern <- "Levothyroxine_핵의학과"

t4_data <- load_levothyroxine_data(raw_data_path, pattern)
t4_data$처방일자 <-as.Date(t4_data$처방일자)
t4_data$수량 <-as.numeric(t4_data$수량)

t4_data <- t4_backup<-t4_data %>%
  group_by(등록번호, 환자명) %>%
  summarise(
    first_t4 = min(처방일자),
    last_t4 = max(처방일자),
    total_t4 = sum(수량),
    count_t4 = n(),
    .groups = "drop"
  )

setnames(t4_data, old = "등록번호", new = "PtID")
```

```{r tx_data_merge, echo=FALSE}

tx_patient_data <- merge(tx_patient_data, t4_data, by = "PtID", all.x = TRUE)

last_t4_na_2006<-tx_patient_data %>% filter(as.Date(tx_patient_data$last) > as.Date("2005-12-31") & is.na(tx_patient_data$last_t4))

tx_patient_data$refer <- ifelse(
  as.Date(tx_patient_data$last) > as.Date("2005-12-31") & is.na(tx_patient_data$last_t4), "1", tx_patient_data$refer)

tx_1_t4_1<-tx_patient_data %>% filter(count==1&count_t4==1)

tx_patient_data$refer <- ifelse((tx_patient_data$count==1&tx_patient_data$count_t4==1),"1",tx_patient_data$refer)

tx_refer<-tx_patient_data %>% filter(as.numeric(refer)>0)
tx_no_refer<-tx_patient_data %>% filter(as.numeric(refer)==0|is.na(refer))
tx_no_refer_followup <- tx_no_refer %>% filter(!is.na(last_t4))
tx_no_refer_no_followup <- tx_no_refer %>% filter(is.na(last_t4))
```

### Levothyroxine 처방통계

-   약품별 처방통계를 사용
-   tx_patient_data의 followupdate 결정에 사용
-   처방기간은 `r min(t4_data$first_t4, na.rm=TRUE)`부터 `r max(t4_data$last_t4, na.rm=TRUE)`
-   tx_patient_data 환자들은 `r nrow(tx_patient_data)`명이었고
-   치료환자 중 (처방기록이 다운로드된) 2006년부터 T4 처방기록이 없는 `r nrow(last_t4_na_2006)`명은 수탁환자로 분류하였다.
-   치료환자 중 치료기록이 1회이면서 처방기록도 1회인 `r nrow(tx_1_t4_1)`경우는 수탁환자로 분류하였다.
-   치료환자 중 수탁치료의 기록이나 분류된 환자수는 `r nrow(tx_refer)`명이었고 이를 제외한 환자=본원환자수는 `r nrow(tx_no_refer)`이었다.
-   본원환자라고 분류된 환자들 중 T4 처방기록이 있는 경우는 `r nrow(tx_no_refer_followup)`명이었고, 처방기록이 없는 경우는 `r nrow(tx_no_refer_no_followup)`명이었는데, 후자는 2006년 이전의 수탁이나 기록이 없거나 2006년 이전에 follow up loss되어 T4 처방이 없는 환자로 판단된다.

```{r end, echo=FALSE}

```
