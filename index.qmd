---
title: 방사성요오드 치료 데이터베이스
author: 김병일
description: "데이터베이스를 만드는 과정 설명"
date: "2025-01-11"
date-modified: "`r Sys.Date()`"
---

```{r mode, ehco=FALSE, warning=FALSE, message=FALSE}

manusctipt_mode<-"N" 
input_error_checking_mode<-"Y"
```

```{r library, echo=FALSE, message=FALSE}

library(data.table)
library(readxl)
library(dplyr)
library(stringr)
library(lubridate)
library(ggplot2)
library(knitr)
library(purrr)
library(stringi)
```

```{r sourcing, echo=FALSE, message=FALSE}

load_source_files <- function (source_folder) {

  source_path <- file.path(getwd(), source_folder)
  r_files <- list.files(source_path, pattern = "\\.R$", full.names = TRUE)
  invisible(lapply(r_files, source))
}

load_source_files("source")
```

```{r gamma, echo=FALSE, message=FALSE, warning=FALSE}

gamma_raw<- my_read_excel_list("raw_data/Gamma_data","Gamma")

gamma <- gamma_raw[, .SD, .SDcols = c("등록번호","성명","처방일","진료과","진료과명","항목코드","항목명","실시일시")]
gamma[, 처방일 := as.IDate(처방일, format = "%Y%m%d")]
gamma[, 실시일 := as.IDate(실시일시, format = "%Y%m%d")][, 실시일시 := NULL]
gamma[, 요일 := weekdays(실시일)]

```

## OCS 자료

### I-131 치료스캔 정보

I-131 치료정보를 구하는 방법은 몇 가지가 있겠지만 이 글에서는 판독소견조회메뉴에서 다운로드된 자료에서 추출하는 방식을 설명합니다.

-   핵의학체내/검사결과관리/판독소견조회 메뉴에서 접수일자를 설정하고 검사실을 감마카메라실로 설정하여 진행합니다.

-   이 때 접수일자기간을 너무 길게 설정하면 오류가 나므로 3개월에서 6개월 정도가 적당해 보입니다. 하지만 특정분기에는 검사 건수가 많아 3개월 단위로 다운로드 하는 것이 제일 안전합니다.

-   조회가 완료되면 좌하측의 "조회내역출력"버튼을 누르면 화면에 검사내역이 보이며 우측하부의 페이지가 계속증가하는 것이 보입니다. 페이지가 증가되다가 멈추면, 좌측상부의 저장버튼을 눌러 저장하면 됩니다. csv 파일형식을 지원하지 않으므로 "Microsoft Excel 파일 (\*.xls)로 진행하면 됩니다.

-   보고서 형식 유지는 불필요하므로 선택을 해제하고 진행하면 됩니다.

-   저장 후에는 마우스 우클릭으로 보안문서관리의 암호화해제를 해야 파일을 열어 볼 수 있습니다.

-   자료를 다운로드 받는 곳은 사전에 허락된 전산적으로 안전한 폴더에 해야 하면, 곧바로 암호를 설정하고, 익명화작업을 거친 자료를 만든 후 원본자료를 바로 영구삭제를 해야 합니다.

-   이글의 아래 부분들은 익명화작업이 완변히 진행되었다고 가정하고 설명을 합니다.

-   이글의 작성시점에서 다운로드된 자료의 개요는 아래와 같습니다.

    -   기간: `r min(gamma$실시일, na.rm=TRUE)` \~ `r max(gamma$실시일, na.rm=TRUE)`
    -   총자료수: `r nrow(gamma)`

```{r HD074, echo=FALSE, message=FALSE, warning=FALSE}

HD074_raw <- gamma[항목코드 %in% "HD074"]

HD074_NM <- HD074_raw[진료과 %in% "NM"]

HD074_NM_월요일 <-  HD074_NM[요일 %in% "월요일"]

HD074 <- HD074_NM[!(요일 %in% "월요일")]
```

#### 항목코드 HD074 선별

I-131 치료 후 시행되는 치료스캔의 코드는 시간 경과에 따라 변해왔습니다. 최근에는 치료스캔의 향상된 수가를 반영하기 위해서 본원에서는

-   항목코드: `HD074`

-   항목명: `체내섭취평가 전신스캔 방법`

을 특정시점부터 사용하고 있습니다. 그래서 가장 최신의 코드인 `HD074` 부터 우선 선별하고 원하는 자료가 맞는지 검증을 진행하였습니다.

-   기간: `r min(HD074$실시일, na.rm=TRUE)` \~ `r max(HD074$실시일, na.rm=TRUE)`

-   총 스캔수: `r nrow(HD074_raw)`

진료과 IM3인 `r nrow(HD074_raw)-nrow(HD074_NM)` 례가 포함되어 있었으며, 이는 DOTATATE 및 PSMA 치료와 같은 타과와의 공동임상시험에서도 위의 치료스캔코드가 사용되어 발생하였하므로 이를 배제하기 위해 `진료과==NM`으로 한정하였을 때

-   `진료과==NM`인 스캔수: `r nrow(HD074_NM)` 였습니다.

I-131 치료스캔은 금요일에 시행되며, 시행요일들은 아래와 같았습니다.

```{r tbl-distribution, echo=FALSE, message=FALSE, warning=FALSE}

table(HD074_NM$요일) %>% kable()
```

-   월요일에 실시된 치료스캔들의 판독내용을 보면 Ra-223 치료스캔이거나 NM에서 시행된 DOTATATE 치료이므로 월요일 실시된 스캔들을 제외하고 진행하였습니다.

-   따라서 HD074로 I-131 치료스캔으로 인정되는 사례는 `r nrow(HD074)`였습니다.

```{r HD074_실시일별, echo=FALSE, message=FALSE}

HD074_실시일별 <- HD074[, .(n = .N), by = .(실시일, 요일)]
```

-   일일치료건수의 최대값은 `r max(HD074_실시일별$n)`으로 가용한 핵의학과 격리 치료병실 수 범위 내 였습니다.
-   이를 일별 치료건수로 도시하면 아래의 @fig-HD074 와 같습니다.

```{r echo=FALSE, message=FALSE}
#| label: fig-HD074

plots<-my_daily_graphs(HD074_실시일별)
walk(plots, print)
```

```{r D43018, echo=FALSE, message=FALSE}

D43018 <- gamma[항목코드 %in% "D43018"]
D43018_실시일별 <- D43018[, .(n = .N), by = .(실시일, 요일)]
```

#### 항목코드 D43018 선별

-   항목코드 `D43018`은 항목명 `[131I] Whole Body Scan (Post Treatment)`입니다.
-   선별해보면
    -   기간: `r min(D43018$실시일, na.rm=TRUE)` \~ `r max(D43018$실시일, na.rm=TRUE)`
    -   총건수: `r nrow(D43018)` 이었습니다.
    -   전형적인 코드이므로 요일과 무관하게 당연히 I-131 치료스캔으로 판단됩니다.
    -   HD074와 처방기간의 중복도 없습니다.
-   오류점검에서
    -   시행일별 최대건수는 `r max(D43018_실시일별$n, na.rm=TRUE)`로 치료병실 가동범위 내입니다.
    -   그래프는 아래와 같습니다.

```{r echo=FALSE, message=FALSE}
#| label: fig-D43018

plots<-my_daily_graphs(D43018_실시일별)
walk(plots, print)
```

```{r D43019, echo=FALSE, message=FALSE}

D43019 <- gamma[항목코드 %in% "D43019"]

min_D43018_date <- min(gamma[항목코드 %in% "D43018", 실시일], na.rm = TRUE)

D43019_before_D43018 <- D43019[실시일 < min_D43018_date]
D43019_after_D43018 <- D43019[실시일 >= min_D43018_date]

D43019_실시일별 <- D43019[, .(n = .N), by = .(실시일, 요일)]
```

#### 항목코드 D43019 선별

-   항목코드 `D43019`은 항목명 `[131I] Whole Body Scan (5mCi)`입니다.
-   선별해보면
    -   기간: `r min(D43019$실시일, na.rm=TRUE)` \~ `r max(D43019$실시일, na.rm=TRUE)`
    -   총건수: `r nrow(D43019)` 였습니다.
    -   그 이전에도 이 코드는 사용되었지만 전산화가 되기 이전은 다운로드가 되지 않아서 최초 사용일이 2000년도라 생각됩니다.
    -   기간에 따라 사용목적이 달라졌다고 생각되는데 `D43018`이 사용되기전인 `r min(D43018$실시일, na.rm=TRUE)` 이전의 `r nrow(D43019_before_D43018)` 사례는 I-131 치료스캔으로 사용이되었다고 생각됩니다. 이후의 `r nrow(D43019_after_D43018)` 사례는 진단스캔으로 사용된 것으로 추정됩니다.
    -   일단은 `D43018` 이전은 치료로 간주하고 이후는 사용목적이 불분명하지만 그 빈도가 높지 않으므로 I-131 diagnostic whole body scan으로 사용된 것으로 간주하고 진행하였습니다.
-   오류점검에서
    -   시행일별 최대건수는 `r max(D43019_실시일별$n, na.rm=TRUE)`로 치료병실 가동범위 내입니다.

```{r echo=FALSE, message=FALSE}
#| label: fig-D43019

plots<-my_daily_graphs(D43019_실시일별)
walk(plots, print)
```

```{r D43020, echo=FALSE, message=FALSE}
#| eval: false

D43020 <- gamma[항목코드 %in% "D43020"]
```

#### 항목코드 D43020 비선별

-   항목코드 `D43020`은 항목명 `[131I] Whole Body Scan (10mCi)`입니다.
-   진단스캔만으로 사용되었다 생각되어 치료스캔에 포함시키지 않았습니다.

```{r Tx_OCS, echo=FALSE, message=FALSE}

Tx_OCS <- rbind(HD074, D43018, D43019_before_D43018)

# group_Tx_OCS <- Tx_OCS[, .(
#   횟수 = .N,
#   first = min(실시일, na.rm = TRUE),
#   last = max(실시일, na.rm = TRUE)
# ), by = .(등록번호, 성명)]

setnames(Tx_OCS, old = "등록번호", new = "PtID")
setnames(Tx_OCS, old = "성명", new = "PtName")
setnames(Tx_OCS, old = "처방일", new = "투여일")
setnames(Tx_OCS, old = "항목코드", new = "출처")
Tx_OCS[, 투여일 := 실시일 - 2]
Tx_OCS <- Tx_OCS[, .SD, .SDcols = c("PtID", "PtName", "투여일", "출처", "실시일")]
Tx_OCS[, 치료종류 := "I-131"]
```

#### Tx_OCS 자료의 통합

-   D43019 자료는 D43018이 최초사용일인 `r max(D43018$실시일, na.rm=TRUE)`까지만 통합에 사용하였습니다.
-   D43018은 자료수 `r nrow(D43018)` 그대로 통합하였고
-   HD074도 자료수 `r nrow(HD074)` 그대로 통합하여
-   총자료수 `r nrow(Tx_OCS)` 로 진행하였습니다.
-   하지만 D43019의 2001년 그래프를 보면 치료건수가 3월부터 약 20건으로 급증하여 이 것이 국가방사선비상진료센터 내의 격리치료병실이 가동되기 시작한 때로 추정되며, 치료환자의 분석시작 시점으로 설정하는 것도 향후 고려됩니다.

```{r Tx_Access, echo=FALSE, message=FALSE, warning=FALSE}

access_raw <- my_read_excel("raw_data/Tx_data","I-131 치료 정보.xlsx",                my_define_col_types(total=17,date=4,numeric=c(5,6)))

access_raw_list <-my_PtID(access_raw)
Tx_Access <-access_raw_list$valid_data
Tx_Access_invalid <-access_raw_list$invalid_data
Tx_Access_invalid <- Tx_Access_invalid[!is.na(PtID)]
Tx_Access<-rbind(Tx_Access,Tx_Access_invalid)
Tx_Access <- Tx_Access[, .SD, .SDcols = c("PtID", "환자이름", "치료종류", "투여일", "용량", "회차", "담당과장","수탁병원","비고")]

Tx_Access_sequence <-my_find_invalid_sequences(Tx_Access)

# 수탁병원기록이 없거나 "ㅡ"면 refer에 0을 파생
Tx_Access[, refer := ifelse(is.na(수탁병원) | 수탁병원 == "ㅡ", 0, 1)]

# 환자단위로 요약
Tx_Access_patient <- Tx_Access[, .(
  first = min(투여일, na.rm = TRUE),
  last = max(투여일, na.rm = TRUE),
  cumulative_dose = sum(용량, na.rm = TRUE),
  count = .N,
  refer = sum(refer, na.rm = TRUE)
), by = .(PtID, 환자이름)]

Tx_Access_patient_our <- Tx_Access_patient[refer == 0]
Tx_Access_patient_refer <- Tx_Access_patient[refer > 0]
```

## Access 데이터베이스

### I-131 치료 정보

-   저자는 핵의학치료를 `I-131 치료 정보` 테이블에 2014년7월9일까지 입력했었습니다.
    -   `r min(Tx_Access$투여일, na.rm=TRUE)`부터 `r max(Tx_Access$투여일, na.rm=TRUE)`까지
    -   `r nrow(Tx_Access)`회의 핵의학치료가 입력되어 있었으며,
    -   환자를 기준으로 하면 `r nrow(Tx_Access_patient)`명이었고, 입력된 수탁정보를 기준으로
        -   본원환자는 `r nrow(Tx_Access_patient_our)`명
        -   수탁환자는 `r nrow(Tx_Access_patient_refer)`명이었습니다.

```{r rai_graph, echo=FALSE, message=FALSE, warning=FALSE}

Tx_Access_투여일별 <- Tx_Access[, .(n = .N), by = .(투여일)]
Tx_Access_실시일별 <- Tx_Access_투여일별[,실시일:=as.IDate(투여일)]
setorder(Tx_Access_실시일별, 실시일)  # 오름차순 정렬
plots <- my_daily_graphs(Tx_Access_실시일별)

walk(plots, print)
```

-   그래프를 보면 `r min(Tx_Access$실시일, na.rm=TRUE)`부터이지만, 1996년 이전은 간헐적으로 입력된 것으로 판단되므로, 경우에 따라서는 1996년부터 분석대상으로 하는 것이 고려될 수 있다.

```{r Tx_RAI, echo=FALSE, message=FALSE, warning=FALSE}

Tx_Access[, 출처 := "access"]
Tx_Access[, 투여일 := as.IDate(투여일)]

rai_raw <-bind_rows(Tx_Access,Tx_OCS)

setorder(rai_raw, PtID, 투여일)
rai_PtID_투여일<-rai_raw[, `:=`(
  다음투여일_차이 = as.numeric(difftime(shift(투여일, type = "lead"), 투여일, units = "days")),
  이전투여일_차이 = as.numeric(difftime(투여일, shift(투여일, type = "lag"), units = "days"))
), by = PtID]

rai_PtID_투여일[, remove := fifelse(
  ((!is.na(다음투여일_차이) & 다음투여일_차이 < 8) |
   (!is.na(이전투여일_차이) & 이전투여일_차이 < 8)) & 출처 != "access",
  "Y",
  "N"
)]


rai_PtID_투여일[, 출처 := fifelse(
  ((!is.na(다음투여일_차이) & 다음투여일_차이 < 8) | 
   (!is.na(이전투여일_차이) & 이전투여일_차이 < 8)) & 
   출처 == "access",
  paste(출처, "OCS"),
  출처
)]

Tx_RAI <- rai_PtID_투여일[remove == "N"]
rai_duplicated <- rai_PtID_투여일[remove != "N"]
rai_pure <- Tx_RAI[치료종류 != "I-131 MIBG" & 치료종류 != "RIT"]
non_rai <- Tx_RAI[치료종류 == "I-131 MIBG" | 치료종류 == "RIT"]
```

```{r rai_pure, echo=FALSE, message=FALSE, warning=FALSE}

setnames(rai_pure, old = "환자이름", new = "PtName")
setnames(rai_pure, old = "치료종류", new = "TxType")
setnames(rai_pure, old = "투여일", new = "TxDate")
setnames(rai_pure, old = "용량", new = "TxDose")
setnames(rai_pure, old = "회차", new = "TxNumber")
setnames(rai_pure, old = "수탁병원", new = "referH")
setnames(rai_pure, old = "출처", new = "source")
setnames(rai_pure, old = "비고", new = "memo")

```

-   Access 데이터베이스의 `r nrow(Tx_Access)` 건과 OCS 다운로드된 `r nrow(Tx_OCS)` 건을 단순히 병합하면 `r nrow(rai_raw)`이지만
-   중복된 `r nrow(rai_duplicated)` 건을 제외하면
-   총 치료횟수는 `r nrow(Tx_RAI)` 건이었다.
-   치료종류가 `I-131 MIBG` 와 `RIT` 는 `r nrow(non_rai)` 였다.
-   이를 제외한 Radioactive Iodine Therapy는 `r nrow(rai_pure)` 건 이었다.

```{r rai_patient, echo=FALSE, message=FALSE, warning=FALSE}

rai_temp <- copy(rai_pure)

rai_patient <-rai_temp[, .(
  first = as.Date(min(TxDate, na.rm = TRUE)),
  last = as.Date(max(TxDate, na.rm = TRUE)),
  count = .N,
  refer = sum(refer, na.rm = TRUE)
), by = .(PtID, PtName)]
```


```{r EMR_raw, echo=FALSE, warning=FALSE, message=FALSE}

EMR_raw<- my_read_excel_list("raw_data","관심환자")
EMR_raw <- EMR_raw[, .(등록일, 등록번호, `성 명`, 성별, 나이, 특기사항, 분류명)]
EMR_raw[, 등록일 := as.IDate(등록일)]
```

```{r Tx_EMR, echo=FALSE, warning=FALSE, message=FALSE}

Tx_EMR <- my_parsing_Tx_EMR(EMR_raw)


  dt<-Tx_EMR

  dt[, TxDate := str_extract(tx_line, "\\d{4}-\\d{2}-\\d{2}")]
  dt[, tx_line := str_remove(tx_line, "\\d{4}-\\d{2}-\\d{2}")]
  error <- dt[is.na(TxDate)]
  error[,TxDate := str_extract(tx_line, "\\d{4}-\\w{2}-dd")]
  error[, tx_line := str_remove(tx_line, "\\d{4}-\\w{2}-dd")]
  error[,TxDate := str_replace(TxDate, "mm","06")]
  error[,TxDate := str_replace(TxDate, "dd","15")]
  error[,TxDate_imputed := TRUE]
  dt <- dt[!is.na(TxDate)]
  dt[,TxDate_imputed := FALSE]
  dt<-rbind(dt,error)
  dt[, TxDate := as.IDate(TxDate)]
  Tx_EMR_error_TxDate <- dt[is.na(TxDate)]
  dt <- dt[!is.na(TxDate)]

  dt[, Tx_rhTSH := str_detect(tx_line, "\\brhTSH\\b")]
  dt[, MIBG := str_detect(tx_line, "\\bMIBG\\b")]
  dt[, tx_line := str_remove(tx_line, "\\brhTSH\\b|\\bMIBG\\b")]
  
  dt[, combined_agent := str_extract(tx_line, "\\s\\+.*?(?=\\()")]
  dt[, tx_line := str_remove(tx_line, "\\s\\+.*?(?=\\s*\\()")]
  
  dt[, TxType := fifelse(
    MIBG == TRUE, 
    "I-131 MIBG",  # MIBG가 TRUE인 경우
    fifelse(
      !is.na(combined_agent), 
      str_c("I-131", combined_agent, sep = ""),  # combined_agent가 NA가 아니면 결합
      "I-131"  # 나머지 경우
    )
  )]
  dt[, c("MIBG", "combined_agent") := NULL]
  Tx_EMR_error_TxType <<- dt[is.na(TxType)]
  dt <- dt[!is.na(TxType)]
  
  dt[, TxDose := str_extract(tx_line, "\\d+\\s*mCi")]
  dt[, tx_line := str_remove(tx_line, "\\d+\\s*mCi")]
  dt[, TxDose := as.numeric(str_remove(TxDose, " mCi"))]
  Tx_EMR_error_TxDose <<- dt[is.na(TxDose)]
  dt <- dt[!is.na(TxDose)]
  
  dt[, tx_details := str_extract(tx_line, "\\(.*?\\)")]
  dt[, tx_line := str_remove(tx_line, "\\(.*?\\)")] 
  
  dt[, outsideH := str_extract(tx_line, "@\\s*.*$")]
  dt[, tx_line := str_remove(tx_line, "@\\s*.*$")]


  dt[, c("TxNumber", "TxWBS", "Tg_TFT", "TxTgAb") := tstrsplit(tx_details, ",", fixed = TRUE)]

  dt[, TxNumber := as.numeric(str_extract(TxNumber, "\\d"))]
  
  dt[is.na(Tg_TFT), TxTg_binary := "NA"]
  dt[str_detect(Tg_TFT, "Tg\\s*NA"), TxTg_binary := "NA"]
  dt[, Tg_TFT := str_remove(Tg_TFT, "Tg\\s*NA")]

  dt[str_detect(Tg_TFT, "Tg\\s*-"), TxTg_binary := "negative"]
  dt[, Tg_TFT := str_remove(Tg_TFT, "Tg\\s*-")]
  
  dt[str_detect(Tg_TFT, "Tg\\s*\\+"), TxTg_binary := "positive"]
  dt[, Tg_TFT := str_remove(Tg_TFT, "Tg\\s*\\+")]

  dt[, Tg1 := str_extract(Tg_TFT, "(?<=Tg )\\d+\\.?\\d*")]
  dt[, Tg_TFT := str_remove(Tg_TFT, "(?<=Tg )\\d+\\.?\\d*")]

  dt[, TFT := str_extract(Tg_TFT, "(?<=Tg/TgAb/TSH ).*?(?=\\))")]
  dt[, c("Tg2", "TgAb", "TSH") := tstrsplit(TFT, "/", fixed = TRUE)]
  
  dt[str_detect(Tg2, "ND|NA"), TxTg_binary := "NA"]

  dt[str_detect(Tg2, "-"), TxTg_binary := "negative"]
  dt[str_detect(Tg2, "\\+"), TxTg_binary := "positive"]
  
  dt[, TxTg := as.numeric(Tg1)]
  dt[, Tg2 := as.numeric(Tg2)]
  dt[, TxTg := ifelse(is.na(TxTg), Tg2, TxTg)]
  
  dt[!is.na(TxTg), TxTg_binary := "positive"]
  
  Tx_EMR_error_TxTg_binary <- dt[is.na(TxTg_binary)]

```

```{r Tx_EMR_error, echo=FALSE, warning=FALSE, message=FALSE}

dt_TxDate별 <- dt[, .(n = .N), by = .(TxDate)]
setnames(dt_TxDate별, old = "TxDate", new = "실시일")
setorder(dt_TxDate별, 실시일)  # 오름차순 정렬
plots<-my_daily_graphs(dt_TxDate별)
walk(plots, print)
```

```{r combining, echo=FALSE, message=FALSE, warning=FALSE}

combine <- dt[!is.na(TxTg_binary),]
combine <- combine[, .SD, .SDcols = c("등록번호","성 명","TxDate","TxType","TxDose","TxNumber","outsideH","TxWBS","TxTg","TxTg_binary")]

setnames(combine, old = "등록번호", new = "PtID")
setnames(combine, old = "성 명", new = "PtName")
combine[,source := "EMR"]

Tx <- rbind(rai_pure, combine[TxType != "I-131 MIBG",], fill=TRUE)
```

```{r duplication_check_2, echo=FALSE, message=FALSE, warning=FALSE}

setorder(Tx, PtID, TxDate)
Tx_PtID_TxDate<-Tx[, `:=`(
  다음TxDate_차이 = as.numeric(difftime(shift(TxDate, type = "lead"), TxDate, units = "days")),
  이전TxDate_차이 = as.numeric(difftime(TxDate, shift(TxDate, type = "lag"), units = "days"))
), by = PtID]

Tx_PtID_TxDate[, remove := fifelse(
  ((!is.na(다음TxDate_차이) & 다음TxDate_차이 < 8) |
   (!is.na(이전TxDate_차이) & 이전TxDate_차이 < 8)) & source != "EMR",
  "Y",
  "N"
)]


Tx_PtID_TxDate[, source := fifelse(
  ((!is.na(다음TxDate_차이) & 다음TxDate_차이 < 8) | 
   (!is.na(이전TxDate_차이) & 이전TxDate_차이 < 8)) & 
   source != "EMR",
  paste(source, "EMR"),
  source
)]

Tx_RAI <- Tx_PtID_TxDate[remove == "N"]
Tx_duplicated <- Tx_PtID_TxDate[remove != "N"]


```

```{r Tx_grouped, echo=FALSE, message=FALSE, warning=FALSE}

rai_patient_data <- Tx_RAI[, .(
  first = min(TxDate),          # TxDate의 최소값
  last = max(TxDate),           # TxDate의 최대값
  refer = sum(refer),           # refer 합계
  TxNumber = .N                 # TxNumber 개수 (행 개수)
), by = .(PtID)]

```


```{r end, echo=FALSE}

```


```{r prescription, echo=FALSE}

raw_data_directory<-"raw_data/Prescription_data"
project_path <<- getwd()
raw_data_path <<- file.path(project_path, raw_data_directory)
pattern <- "갑상선호르몬_처방현황"

t4_data <- load_levothyroxine_data(raw_data_path, pattern)
t4_data$처방일자 <-as.Date(t4_data$처방일자)
t4_data$수량 <-as.numeric(t4_data$수량)

t4_data <- t4_backup<-t4_data %>%
  group_by(등록번호, 환자명) %>%
  summarise(
    first_t4 = min(처방일자),
    last_t4 = max(처방일자),
    total_t4 = sum(수량),
    count_t4 = n(),
    .groups = "drop"
  )

setnames(t4_data, old = "등록번호", new = "PtID")
```

```{r birthday_data, echo=FALSE, warning=FALSE, message=FALSE}

# 나이에 있는 "세"를 제거하고 정수형으로 변환
EMR_raw$나이 <- as.integer(sub("세", "", EMR_raw$나이))
setnames(EMR_raw, old="등록번호", new="PtID")
birthday_data <- my_parsing_birthday_data (EMR_raw)
```

```{r risk_data, echo=FALSE, warning=FALSE, message=FALSE}

risk_data <- my_parsing_risk_data (EMR_raw)
```

```{r response_data, echo=FALSE, warning=FALSE, message=FALSE}

response_data <- my_parsing_response_data (EMR_raw)
```

```{r c73, echo=FALSE}


directory<-"raw_data/Tx_data"
file_name<-"갑상선암 정보.xlsx"
file_path<-file.path(project_path,directory,file_name)
col_types <- rep("text", 59)
col_types[c(2,6,9,40,41,44,58)]<-"date"
c73_raw_data <- as.data.table(read_xlsx(file_path, col_types = col_types))

c73_data <- c73_raw_data[, lapply(.SD, function(col) if (!all(is.na(col))) col), .SDcols = names(c73_raw_data)]
# c73_data<-my_PtID(c73_data)
c73_data <- c73_data %>%
  mutate(
    수술과최초진단일일치 = !is.na(수술일) & !is.na(최초진단일) & (수술일 == 최초진단일)
  )
c73_op_data <- c73_data[!is.na(최초진단일) |!is.na(수술일) | !is.na(갑상선제거방법)]

```

### C73 수술정보

-   저자는 MS Access를 이용하여 방사성요오드 치료에 대한 데이터베이스를 구축하였었다. 이 자료 중에는 `갑상선암 정보`라는 환자정보에 해당하는 테이블이 있었다.
-   등록번호가 5자리 미만이거나 8자리 초과는 오류이므로 삭제한 후 정리해보면
-   수술일을 기준으로 `r min(c73_data$수술일, na.rm=TRUE)`부터 `r max(c73_data$수술일, na.rm=TRUE)` 까지의 `r nrow(c73_data)` 명의 갑상선암 상병명을 가진 환자들의 수술 정보들이 입력되어 있다.
-   최초진단일 입력건수는 `r sum(!is.na(c73_data$최초진단일))` 이었고, 수술일 입력건수는 `r sum(!is.na(c73_data$수술일))`, 둘 중 하나라도 입력된 건수는 `r sum(!is.na(c73_data$최초진단일) | !is.na(c73_data$수술일))`이었다.
-   갑상선제거방법 입력건수는 `r sum(!is.na(c73_data$갑상선제거방법))`이었다.
-   최초진단일만 입력된 경우가 상당수이긴 하지만 후술하는 치료가 된 환자들의 수술정보가 얼마나 매칭되는지가 관심이므로 일단락한다.

```{r patient, echo=FALSE, message=FALSE, warning=FALSE}


directory<-"raw_data/Tx_data"
file_name<-"Patient.xlsx"
file_path<-file.path(project_path,directory,file_name)
col_types <- rep("text", 19)
col_types[c(7,10,19)]<-"date"
patient_data <- as.data.table(read_xlsx(file_path, col_types = col_types))

patient_data<-select(patient_data, PtID, PtName, Dx, ICDcode, ExpiredDay, FollowUpDay, Protocol)

patient_data <- patient_data %>%
  filter(grepl("Thy|thy", Dx, ignore.case = TRUE) | grepl("C73", ICDcode) | grepl("Thyroid|thyroid|iodine|131", Protocol))

patient_data <- my_PtID(patient_data)
patient_data<-patient_data$valid_data

setnames(c73_data, old = "등록번호", new = "PtID")

merged_data <- merge(c73_data, patient_data, by = "PtID", all.x = TRUE)

patient_data <- select(merged_data, -PtName, -ICDcode)

rm(c73_data,c73_raw_data,merged_data, patient_raw_data)

```

```{r tx_data_merge, echo=FALSE}

rai_patient_data <- merge(rai_patient_data, t4_data, by = "PtID", all.x = TRUE)

na_number_rai_patient_data_refer<-sum(is.na(rai_patient_data$refer))
other_number_rai_patient_data_refer<-table(rai_patient_data$refer)

last_t4_na_20000711<-rai_patient_data %>% filter(as.Date(rai_patient_data$last) > as.Date("2000-07-11") & is.na(rai_patient_data$last_t4))

na_number_last_t4_na_20000711_refer<-sum(is.na(last_t4_na_20000711$refer))
other_number_last_t4_na_20000711_refer<-table(last_t4_na_20000711$refer)

rai_patient_data$refer <- ifelse(
  as.Date(rai_patient_data$last) > as.Date("2000-07-11") & is.na(rai_patient_data$last_t4), "1", rai_patient_data$refer)

na_number_rai_patient_data_refer2<-sum(is.na(rai_patient_data$refer))
other_number_rai_patient_data_refer2<-table(rai_patient_data$refer)

tx_1_t4_1<-rai_patient_data %>% filter(TxNumber==1&count_t4==1)

na_number_tx_1_t4_1_refer<-sum(is.na(tx_1_t4_1$refer))
other_number_tx_1_t4_1_refer<-table(tx_1_t4_1$refer)

rai_patient_data$refer <- ifelse((rai_patient_data$TxNumber==1&rai_patient_data$count_t4==1),"1",rai_patient_data$refer)

na_number_rai_patient_data_refer3<-sum(is.na(rai_patient_data$refer))
other_number_rai_patient_data_refer3<-table(rai_patient_data$refer)

rai_refer<-rai_patient_data %>% filter(as.numeric(refer)>0)
rai_no_refer<-rai_patient_data %>% filter(as.numeric(refer)==0|is.na(refer))
rai_no_refer_followup <- rai_no_refer %>% filter(!is.na(last_t4))
rai_no_refer_no_followup <- rai_no_refer %>% filter(is.na(last_t4))
```

### Levothyroxine 처방통계

-   약품별 처방통계로부터 다운로드하여 followupdate 결정에 사용
-   (다운로드 가능했던) 처방기간은 `r min(t4_data$first_t4, na.rm=TRUE)`부터 `r max(t4_data$last_t4, na.rm=TRUE)`
-   rai_patient_data 환자들은 `r nrow(rai_patient_data)`명이었고
-   치료환자 중 `r min(t4_data$first_t4, na.rm=TRUE)` 이후의 T4 처방기록이 없는 `r nrow(last_t4_na_20000711)`명은 수탁환자로 분류하였다.
-   치료기록이 1회이면서 처방기록도 1회인 `r nrow(tx_1_t4_1)`경우도 수탁환자로 분류하였다.
-   수탁으로 분류된 환자수는 `r nrow(rai_refer)`명이었고 이를 제외한 환자=본원환자수는 `r nrow(rai_no_refer)`이었다.
    -   본원환자라고 분류된 환자들 중 T4 처방기록이 있는 경우는 `r nrow(rai_no_refer_followup)`명이었고,
    -   처방기록이 없는 경우는 `r nrow(rai_no_refer_no_followup)`명이었는데, 후자는 2000년 7월 11일 이전의 수탁이나 기록이 없거나 2000년 7월 11일 이전에 follow up loss되어 T4 처방이 없는 환자로 판단된다.

## 저자의 환자

-   예후/추척관찰 정보는 저자의 외래환자들에 대해 EMR 관심환자에 입력되어 있다.
-   이는 핵의학 전체환자로 확장하기 전에 pilot 성격을 가진다.
